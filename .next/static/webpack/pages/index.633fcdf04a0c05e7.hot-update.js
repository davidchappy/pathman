"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pathman/game.ts":
/*!*************************!*\
  !*** ./pathman/game.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./pathman/types.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./pathman/config.ts\");\n/* harmony import */ var _maze__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maze */ \"./pathman/maze.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state */ \"./pathman/state.ts\");\n/* harmony import */ var _draw__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./draw */ \"./pathman/draw.ts\");\n/* harmony import */ var _pathfinding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pathfinding */ \"./pathman/pathfinding.ts\");\n\n\n\n\n\n\nconst game = (canvas)=>{\n    let state = (0,_state__WEBPACK_IMPORTED_MODULE_3__.getInitialState)();\n    const { draw, drawOverlay } = (0,_draw__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(canvas, state);\n    const init = ()=>{\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        calculateScale();\n    };\n    const calculateScale = ()=>{\n        // TODO: calculate width based on the number of cells in the maze\n        // const mazeWidth = 0 + config.sidebarWidth\n        const scale = window.innerWidth / window.innerWidth;\n        state.scale = scale;\n    };\n    const updatePathman = ()=>{\n        // First, find the cell that pathman is in currently\n        const cellX = Math.floor(state.pathman.x / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize);\n        const cellY = Math.floor(state.pathman.y / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize);\n        state.pathman.currentCell = {\n            x: cellX,\n            y: cellY\n        };\n        // Animate mouth\n        if (state.pathman.isMoving) {\n            const mouthSpeed = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.mouthSpeed // Speed of mouth opening/closing\n            ;\n            const maxLowestAngle = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.maxLowestAngle // Maximum mouth angle in radians\n            ;\n            if (state.pathman.mouthOpening) {\n                state.pathman.mouthAngle -= mouthSpeed // Increase the mouth angle\n                ;\n                if (state.pathman.mouthAngle < maxLowestAngle) {\n                    state.pathman.mouthAngle = maxLowestAngle // Limit the mouth angle\n                    ;\n                    state.pathman.mouthOpening = false // Start closing the mouth\n                    ;\n                }\n            } else {\n                state.pathman.mouthAngle += mouthSpeed // Decrease the mouth angle\n                ;\n                if (state.pathman.mouthAngle > 0) {\n                    state.pathman.mouthAngle = 0;\n                    state.pathman.mouthOpening = true // Start opening the mouth\n                    ;\n                }\n            }\n        }\n        // Move\n        if (state.pathman.direction === \"none\" || !state.pathman.isMoving) return;\n        let newX = state.pathman.x;\n        let newY = state.pathman.y;\n        if (state.pathman.direction === \"right\") {\n            newX += _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.speed;\n        }\n        if (state.pathman.direction === \"left\") {\n            newX -= _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.speed;\n        }\n        if (state.pathman.direction === \"up\") {\n            newY -= _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.speed;\n        }\n        if (state.pathman.direction === \"down\") {\n            newY += _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.speed;\n        }\n        const pathmanRadius = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.size / 2;\n        // Check for collisions\n        const maze = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].maze.cells;\n        const currentCell = {\n            x: cellX,\n            y: cellY\n        };\n        state.debug.currentPathmanPosition = {\n            x: state.pathman.x,\n            y: state.pathman.y,\n            currentCell\n        };\n        const direction = state.pathman.direction;\n        let adjacentCell;\n        let willColide = false;\n        if (direction === \"right\" && state.pathman.x >= cellX * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize - pathmanRadius) {\n            var _maze_cellY;\n            adjacentCell = (_maze_cellY = maze[cellY]) === null || _maze_cellY === void 0 ? void 0 : _maze_cellY[cellX + 1];\n        }\n        if (direction === \"left\" && state.pathman.x <= cellX * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + pathmanRadius) {\n            var _maze_cellY1;\n            adjacentCell = (_maze_cellY1 = maze[cellY]) === null || _maze_cellY1 === void 0 ? void 0 : _maze_cellY1[cellX - 1];\n        }\n        if (direction === \"up\" && state.pathman.y <= cellY * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + pathmanRadius) {\n            var _maze_;\n            adjacentCell = (_maze_ = maze[cellY - 1]) === null || _maze_ === void 0 ? void 0 : _maze_[cellX];\n        }\n        if (direction === \"down\" && state.pathman.y >= cellY * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize - pathmanRadius) {\n            var _maze_1;\n            adjacentCell = (_maze_1 = maze[cellY + 1]) === null || _maze_1 === void 0 ? void 0 : _maze_1[cellX];\n        }\n        // Check for collisions with walls\n        if (adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallHorizontal || adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallVertical || adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerTopLeft || adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerTopRight || adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerBottomLeft || adjacentCell === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerBottomRight) {\n            willColide = true;\n        }\n        // Check for collisions with canvas\n        // if (newX - pathmanRadius < 0 || newX + pathmanRadius > canvas.width) {\n        //   willColide = true\n        // }\n        // if (newY - pathmanRadius < 0 || newY + pathmanRadius > canvas.height) {\n        //   willColide = true\n        // }\n        if (willColide) {\n            state.pathman.isMoving = false;\n            return;\n        }\n        // Allow wrapping around the maze\n        const { x: mazeWidth, y: mazeHeight } = (0,_maze__WEBPACK_IMPORTED_MODULE_2__.calculateMazeDimensions)();\n        // If going right, should wrap to the same x position on the left side of the maze\n        if (direction === \"right\" && newX + pathmanRadius > mazeWidth) {\n            newX = 0 + pathmanRadius;\n        }\n        // If going left, should wrap to the same x position on the right side of the maze\n        if (direction === \"left\" && newX - pathmanRadius < 0) {\n            newX = mazeWidth - pathmanRadius;\n        }\n        // If going up, should wrap to the same y position on the bottom side of the maze\n        if (direction === \"up\" && newY - pathmanRadius < 0) {\n            newY = mazeHeight - pathmanRadius;\n        }\n        // If going down, should wrap to the same y position on the top side of the maze\n        if (direction === \"down\" && newY + pathmanRadius > mazeHeight) {\n            newY = 0 + pathmanRadius;\n        }\n        state.pathman.x = newX;\n        state.pathman.y = newY;\n        state.pathman.currentCell = {\n            x: Math.floor(newX / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize),\n            y: Math.floor(newY / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize)\n        };\n    };\n    const updateGhosts = ()=>{\n        const ghosts = state.ghosts;\n        if (!state.pathman.currentCell) return;\n        ghosts.forEach((ghost, index)=>{\n            var _state_pathman_currentCell, _state_pathman_currentCell1, _ghost_path;\n            // First, find the cell that ghost is in currently\n            const cellX = Math.floor(ghost.x / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize);\n            const cellY = Math.floor(ghost.y / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize);\n            const currentCell = {\n                x: cellX,\n                y: cellY\n            };\n            ghost.currentCell = currentCell;\n            if (ghost.path.length === 0) {\n                ghost.path = (0,_pathfinding__WEBPACK_IMPORTED_MODULE_5__.aStar)({\n                    x: ghost.currentCell.x,\n                    y: ghost.currentCell.y\n                }, {\n                    x: state.pathman.currentCell.x || 1,\n                    y: state.pathman.currentCell.y || 1\n                }, _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].maze.cells);\n            }\n            // Move\n            const ghostRadius = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ghosts.size / 2;\n            const maze = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].maze.cells;\n            let newX = ghost.x;\n            let newY = ghost.y;\n            // Advance towards the next step in the path\n            const calculateDirection = (entity, nextStep)=>{\n                // check for same cell\n                if (nextStep.x === entity.currentCell.x && nextStep.y === entity.currentCell.y) {\n                    return entity.direction;\n                }\n                // Calculate the center position of the next cell in absolute canvas coordinates\n                const nextCellCenterX = nextStep.x * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize / 2;\n                const nextCellCenterY = nextStep.y * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize / 2;\n                // Calculate the difference in cell coordinates between the entity's current cell and the next step\n                const cellDeltaX = nextStep.x - entity.currentCell.x;\n                const cellDeltaY = nextStep.y - entity.currentCell.y;\n                // Determine the primary axis of movement based on the larger delta\n                const primaryAxis = Math.abs(cellDeltaX) > Math.abs(cellDeltaY) ? \"x\" : \"y\";\n                // Initialize the direction as \"none\"\n                let direction = \"none\";\n                // Determine the direction based on the primary axis and the sign of the delta\n                if (primaryAxis === \"x\") {\n                    direction = cellDeltaX > 0 ? \"right\" : \"left\";\n                } else {\n                    direction = cellDeltaY > 0 ? \"down\" : \"up\";\n                }\n                if (entity.direction === \"none\") {\n                    return direction;\n                }\n                // Check if the entity has reached the center of the next cell along the primary axis of movement\n                // If not, continue in the current direction\n                if (entity.direction === \"right\" && entity.x < nextCellCenterX) return entity.direction;\n                if (entity.direction === \"left\" && entity.x > nextCellCenterX) return entity.direction;\n                if (entity.direction === \"up\" && entity.y > nextCellCenterY) return entity.direction;\n                if (entity.direction === \"down\" && entity.y < nextCellCenterY) return entity.direction;\n                // Return the new direction if the entity has reached the center of the next cell\n                return direction;\n            };\n            if (ghost.path.length > 0) {\n                if (ghost.path[0].x === ghost.currentCell.x && ghost.path[0].y === ghost.currentCell.y) {\n                    ghost.path.shift();\n                }\n                const nextStep = ghost.path[0]// Get the next step in the path\n                ;\n                // console.log(`ghost ${index} next step`, nextStep.x, nextStep.y, ghost.direction)\n                if (!nextStep) return;\n                ghost.direction = calculateDirection(ghost, nextStep) // Calculate the new direction based on the next step\n                ;\n            // console.log(`ghost ${index} new direction`, ghost.direction)\n            }\n            // Move\n            if (ghost.direction === \"right\") {\n                newX += _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ghosts.speed;\n            }\n            if (ghost.direction === \"left\") {\n                newX -= _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ghosts.speed;\n            }\n            if (ghost.direction === \"up\") {\n                newY -= _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ghosts.speed;\n            }\n            if (ghost.direction === \"down\") {\n                newY += _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ghosts.speed;\n            }\n            // Check for collisions\n            const direction = ghost.direction;\n            let adjacentCellType;\n            let adjacentCell;\n            let willColide = false;\n            if (direction === \"right\" && ghost.x >= cellX * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize - ghostRadius) {\n                var _maze_cellY;\n                adjacentCellType = (_maze_cellY = maze[cellY]) === null || _maze_cellY === void 0 ? void 0 : _maze_cellY[cellX + 1];\n                adjacentCell = {\n                    x: cellX + 1,\n                    y: cellY\n                };\n            }\n            if (direction === \"left\" && ghost.x <= cellX * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + ghostRadius) {\n                var _maze_cellY1;\n                adjacentCellType = (_maze_cellY1 = maze[cellY]) === null || _maze_cellY1 === void 0 ? void 0 : _maze_cellY1[cellX - 1];\n                adjacentCell = {\n                    x: cellX - 1,\n                    y: cellY\n                };\n            }\n            if (direction === \"up\" && ghost.y <= cellY * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + ghostRadius) {\n                var _maze_;\n                adjacentCellType = (_maze_ = maze[cellY - 1]) === null || _maze_ === void 0 ? void 0 : _maze_[cellX];\n                adjacentCell = {\n                    x: cellX,\n                    y: cellY - 1\n                };\n            }\n            if (direction === \"down\" && ghost.y >= cellY * _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize - ghostRadius) {\n                var _maze_1;\n                adjacentCellType = (_maze_1 = maze[cellY + 1]) === null || _maze_1 === void 0 ? void 0 : _maze_1[cellX];\n                adjacentCell = {\n                    x: cellX,\n                    y: cellY + 1\n                };\n            }\n            // Check for collisions with walls\n            if (adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallHorizontal || adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallVertical || adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerBottomLeft || adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerBottomRight || adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerTopLeft || adjacentCellType === _types__WEBPACK_IMPORTED_MODULE_0__.CellType.WallCornerTopRight) {\n                console.log(\"ghost collided with wall\");\n                willColide = true;\n            }\n            if ((adjacentCell === null || adjacentCell === void 0 ? void 0 : adjacentCell.x) === ((_state_pathman_currentCell = state.pathman.currentCell) === null || _state_pathman_currentCell === void 0 ? void 0 : _state_pathman_currentCell.x) && (adjacentCell === null || adjacentCell === void 0 ? void 0 : adjacentCell.y) === ((_state_pathman_currentCell1 = state.pathman.currentCell) === null || _state_pathman_currentCell1 === void 0 ? void 0 : _state_pathman_currentCell1.y)) {\n                console.log(\"ghost collided with pathman\");\n                willColide = true;\n                state.phase = \"game-over\";\n            }\n            const otherGhosts = ghosts.filter((g)=>g.id !== ghost.id);\n            otherGhosts.forEach((otherGhost)=>{\n                if ((adjacentCell === null || adjacentCell === void 0 ? void 0 : adjacentCell.x) === otherGhost.currentCell.x && (adjacentCell === null || adjacentCell === void 0 ? void 0 : adjacentCell.y) === otherGhost.currentCell.y) {\n                    console.log(\"ghost collided with another ghost\");\n                    willColide = true;\n                }\n            });\n            if (willColide) {\n                ghost.isMoving = false;\n                return;\n            }\n            // Allow wrapping around the maze\n            const { x: mazeWidth, y: mazeHeight } = (0,_maze__WEBPACK_IMPORTED_MODULE_2__.calculateMazeDimensions)();\n            // If going right, should wrap to the same x position on the left side of the maze\n            if (direction === \"right\" && newX + ghostRadius > mazeWidth) {\n                newX = 0 + ghostRadius;\n            }\n            // If going left, should wrap to the same x position on the right side of the maze\n            if (direction === \"left\" && newX - ghostRadius < 0) {\n                newX = mazeWidth - ghostRadius;\n            }\n            // If going up, should wrap to the same y position on the bottom side of the maze\n            if (direction === \"up\" && newY - ghostRadius < 0) {\n                newY = mazeHeight - ghostRadius;\n            }\n            // If going down, should wrap to the same y position on the top side of the maze\n            if (direction === \"down\" && newY + ghostRadius > mazeHeight) {\n                newY = 0 + ghostRadius;\n            }\n            ghost.x = newX;\n            ghost.y = newY;\n            ghost.currentCell = {\n                x: Math.floor(newX / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize),\n                y: Math.floor(newY / _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cellSize)\n            };\n            if (ghost.currentCell.x !== currentCell.x || ghost.currentCell.y !== currentCell.y) {\n                var _state_pathman_currentCell2, _state_pathman_currentCell3;\n                ghost.path = (0,_pathfinding__WEBPACK_IMPORTED_MODULE_5__.aStar)({\n                    x: ghost.currentCell.x,\n                    y: ghost.currentCell.y\n                }, {\n                    x: ((_state_pathman_currentCell2 = state.pathman.currentCell) === null || _state_pathman_currentCell2 === void 0 ? void 0 : _state_pathman_currentCell2.x) || 1,\n                    y: ((_state_pathman_currentCell3 = state.pathman.currentCell) === null || _state_pathman_currentCell3 === void 0 ? void 0 : _state_pathman_currentCell3.y) || 1\n                }, _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].maze.cells);\n            // console.log(`ghost ${index} reset path`, ghost.path[0])\n            }\n            // Periodically or when Pathman moves, update the ghost's path\n            // if (shouldUpdatePath(ghost)) {\n            // const paths = getTopPaths(ghost, state.pathman, config.maze.cells, 3); // Get top 3 paths\n            // const chosenPath = paths[Math.floor(Math.random() * paths.length)]; // Randomly choose one\n            // ghost.path = chosenPath;\n            // Set the next direction based on the path\n            if (((_ghost_path = ghost.path) === null || _ghost_path === void 0 ? void 0 : _ghost_path.length) > 0) {\n            // const nextStep = ghost.path.shift() // Get the next step in the path\n            // ghost.direction = calculateDirection(ghost, nextStep) // Calculate the new direction based on the next step\n            }\n        });\n    };\n    const updatePellets = ()=>{\n        // Check for collisions\n        const pathmanRadius = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pathman.size / 2;\n        for(let i = 0; i < state.pellets.length; i++){\n            const pellet = state.pellets[i];\n            const distance = Math.sqrt(Math.pow(state.pathman.x - pellet.x, 2) + Math.pow(state.pathman.y - pellet.y, 2));\n            if (distance < pathmanRadius + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pellets.size) {\n                state.pellets.splice(i, 1);\n                i--;\n            }\n        }\n        for(let i = 0; i < state.powerPellets.length; i++){\n            const pellet = state.powerPellets[i];\n            const distance = Math.sqrt(Math.pow(state.pathman.x - pellet.x, 2) + Math.pow(state.pathman.y - pellet.y, 2));\n            if (distance < pathmanRadius + _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].powerPellets.size) {\n                state.powerPellets.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    const updateStats = (deltaTime)=>{\n        state.currentFPS = 1000 / deltaTime;\n    };\n    const handleResize = (event)=>{\n        // Resize the canvas\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        calculateScale();\n        draw();\n    };\n    const handleKeyUp = (event)=>{\n        if (state.phase === \"game-over\" || state.phase === \"game-won\") return;\n        // Toggle pause\n        if (event.key === \" \") {\n            state.phase = state.phase === \"paused\" ? \"playing\" : \"paused\";\n            if (state.phase === \"paused\") {\n                state.overlayText = _config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].overlayMessages.paused;\n                drawOverlay();\n            } else {\n                state.overlayText = \"\";\n                // If unpausing, re-start the animation loop\n                requestAnimationFrame(animate);\n            }\n        }\n        if (state.phase === \"paused\") return;\n        if (event.key === \"ArrowRight\" || event.key === \"d\") {\n            state.pathman.direction = \"right\";\n            state.pathman.isMoving = true;\n        }\n        if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n            state.pathman.direction = \"left\";\n            state.pathman.isMoving = true;\n        }\n        if (event.key === \"ArrowUp\" || event.key === \"w\") {\n            state.pathman.direction = \"up\";\n            state.pathman.isMoving = true;\n        }\n        if (event.key === \"ArrowDown\" || event.key === \"s\") {\n            state.pathman.direction = \"down\";\n            state.pathman.isMoving = true;\n        }\n    };\n    const handleClick = (event)=>{\n        const clickLocation = {\n            x: event.clientX,\n            y: event.clientY\n        };\n        setTimeout(()=>{\n            state.debug.clickLocation = null;\n        }, 4000);\n        state.debug.clickLocation = clickLocation;\n        const resetButton = {\n            x: canvas.width - 120,\n            y: 86,\n            width: 100,\n            height: 30\n        };\n        if (event.clientX >= resetButton.x && event.clientX <= resetButton.x + resetButton.width && event.clientY >= resetButton.y && event.clientY <= resetButton.y + resetButton.height) {\n            reset();\n        }\n    };\n    const attachEvents = ()=>{\n        window.addEventListener(\"resize\", handleResize);\n        window.addEventListener(\"keyup\", handleKeyUp);\n        window.addEventListener(\"click\", handleClick);\n    };\n    const detachEvents = ()=>{\n        window.removeEventListener(\"resize\", handleResize);\n        window.removeEventListener(\"keyup\", handleKeyUp);\n        window.removeEventListener(\"click\", handleClick);\n    };\n    const animate = (timestamp)=>{\n        // Initialize the previous timestamp\n        if (state.previousAnimationTimestamp === undefined) {\n            state.previousAnimationTimestamp = timestamp;\n            requestAnimationFrame(animate);\n            return;\n        }\n        const deltaTime = timestamp - state.previousAnimationTimestamp;\n        // Update stuff\n        if (state.phase === \"playing\") {\n            updatePathman();\n            updateGhosts();\n            updatePellets();\n            updateStats(deltaTime);\n        }\n        // Draw stuff\n        draw();\n        state.previousAnimationTimestamp = timestamp;\n        if (state.phase === \"paused\") return;\n        requestAnimationFrame(animate);\n    };\n    const run = ()=>{\n        console.log(\"Starting Pathman game...\", canvas);\n        init();\n        attachEvents();\n        draw();\n        // fire a resize event\n        const resizeEvent = new Event(\"resize\");\n        window.dispatchEvent(resizeEvent);\n        // Start the animation loop\n        requestAnimationFrame(animate);\n    };\n    const quit = ()=>{\n        console.log(\"Stopping Pathman game...\");\n        state.previousAnimationTimestamp = undefined;\n        detachEvents();\n    };\n    const reset = ()=>{\n        console.log(\"Resetting Pathman game...\");\n        quit();\n        state = (0,_state__WEBPACK_IMPORTED_MODULE_3__.getInitialState)();\n        run();\n    };\n    return {\n        run,\n        quit,\n        reset\n    };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (game);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pathman/game.ts\n"));

/***/ })

});